// pages/api/contact.ts
import type { NextApiRequest, NextApiResponse } from 'next';

// ===== Config (—á–µ—Ä–µ–∑ ENV) =====
// TELEGRAM_BOT_TOKEN=<token>
// TELEGRAM_CHAT_ID=<id>
// ALLOWED_ORIGIN=https://your-site.example   (–æ–ø—Ü. –¥–ª—è CORS)
// TURNSTILE_SECRET_KEY=<key>                 (–æ–ø—Ü. –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ CF Turnstile)

interface ContactFormData {
  name: string;
  contactType: 'email' | 'telegram' | 'phone' | 'whatsapp' | 'other';
  contact: string;
  message: string;
  catName?: string;
  // honeypot:
  website?: string;
  // Turnstile token (–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —É body):
  cfTurnstileToken?: string;
}

type Json = Record<string, unknown>;

// ===== Helpers =====
function json(res: NextApiResponse, status: number, data: Json = {}) {
  res.status(status).json(data);
}

function clamp(s: string, max: number) {
  s = (s ?? '').trim();
  return s.length > max ? s.slice(0, max - 1) + '‚Ä¶' : s;
}

// –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è Telegram MarkdownV2
function escapeMdV2(s: string) {
  return s.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, m => '\\' + m);
}

// –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–∏–π in-memory rate-limit (–Ω–∞ —ñ–Ω—Å—Ç–∞–Ω—Å)
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω—É –∫—Ä–∞—â–µ Redis/Upstash
const bucket = new Map<string, { count: number; reset: number }>();
function rateLimit(ip: string, limit = 5, windowMs = 60_000) {
  const now = Date.now();
  const cur = bucket.get(ip) ?? { count: 0, reset: now + windowMs };
  if (now > cur.reset) {
    cur.count = 0;
    cur.reset = now + windowMs;
  }
  cur.count += 1;
  bucket.set(ip, cur);
  return { ok: cur.count <= limit, remaining: Math.max(0, limit - cur.count) };
}

// –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fetch

// –û–ø—Ü—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ Cloudflare Turnstile
async function verifyTurnstile(token: string, remoteIp: string | undefined) {
  const secret = process.env.TURNSTILE_SECRET_KEY;
  if (!secret) return true; // —è–∫—â–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É

  if (!token) return false;

  const form = new URLSearchParams();
  form.set('secret', secret);
  form.set('response', token);
  if (remoteIp) form.set('remoteip', remoteIp);

  const resp = await fetch(
    'https://challenges.cloudflare.com/turnstile/v0/siteverify',
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: form.toString(),
    },
  );

  if (!resp.ok) return false;
  const data = (await resp.json()) as { success?: boolean };
  return !!data.success;
}

// ===== Handler =====
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  // –ù—ñ–∫–æ–ª–∏ –Ω–µ –∫–µ—à—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ñ–æ—Ä–º–∏
  res.setHeader('Cache-Control', 'no-store');

  // CORS/Origin
  const ALLOWED_ORIGIN = process.env.ALLOWED_ORIGIN || '';
  const origin = req.headers.origin || '';
  res.setHeader('Vary', 'Origin');
  if (ALLOWED_ORIGIN) {
    res.setHeader('Access-Control-Allow-Origin', ALLOWED_ORIGIN);
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader(
      'Access-Control-Allow-Headers',
      'Content-Type, cf-turnstile-response',
    );
    if (req.method === 'OPTIONS') {
      return res.status(204).end();
    }
    if (origin && origin !== ALLOWED_ORIGIN) {
      return json(res, 403, { error: 'Forbidden origin' });
    }
  }

  if (req.method !== 'POST') {
    return json(res, 405, { error: 'Method not allowed' });
  }

  try {
    const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

    if (!telegramToken || !chatId) {
      console.error('Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID'); // –Ω–µ –ª–æ–≥–∏–º–æ —Å–∞–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      return json(res, 500, { error: 'Internal server error' });
    }

    const data = (req.body || {}) as ContactFormData;

    // Honeypot (–ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –ø–æ–ª–µ "website" ‚Äî —è–∫—â–æ –Ω–µ –ø—É—Å—Ç–µ, —Ü–µ –±–æ—Ç)
    if (typeof data.website === 'string' && data.website.trim() !== '') {
      return res.status(204).end(); // —Ç–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
    }

    // Rate-limit
    const ip =
      (req.headers['x-forwarded-for'] as string)?.split(',')[0]?.trim() ||
      req.socket.remoteAddress ||
      '0.0.0.0';
    const rl = rateLimit(ip, 5, 60_000); // 5 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤ –¥–ª—è –æ–¥–Ω—ñ—î—ó IP
    if (!rl.ok) {
      return json(res, 429, { error: 'Too many requests' });
    }

    // –û–ø—Ü—ñ–π–Ω–æ: Turnstile (–ø—Ä–∏–π–º–∞—î–º–æ –∑ body –∞–±–æ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    // const turnstileToken =
    //   data.cfTurnstileToken ||
    //   (req.headers['cf-turnstile-response'] as string | undefined);
    // const turnstileOk = await verifyTurnstile(turnstileToken || '', ip);
    // if (!turnstileOk) {
    //   return json(res, 400, { error: 'Captcha verification failed' });
    // }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤
    const allowedTypes = new Set([
      'email',
      'telegram',
      'phone',
      'whatsapp',
      'other',
    ]);

    let { name, contactType, contact, message, catName } = data;

    if (!name || !contactType || !contact || !message) {
      return json(res, 400, { error: 'Required fields are missing' });
    }
    if (!allowedTypes.has(contactType)) {
      return json(res, 400, { error: 'Invalid contactType' });
    }

    // –õ—ñ–º—ñ—Ç–∏ –¥–æ–≤–∂–∏–Ω–∏
    name = clamp(name, 120);
    contact = clamp(contact, 256);
    message = clamp(message, 3000);
    catName = catName ? clamp(catName, 120) : undefined;

    // Escape –¥–ª—è MarkdownV2
    const nameSafe = escapeMdV2(name);
    const contactSafe = escapeMdV2(contact);
    const msgSafe = escapeMdV2(message);
    const catSafe = catName ? escapeMdV2(catName) : '';

    // –õ–µ–π–±–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    const contactTypeLabels: Record<string, string> = {
      email: 'üìß Email',
      telegram: 'üì± Telegram',
      phone: 'üìû Phone',
      whatsapp: 'üí¨ WhatsApp',
      other: 'üìù Other',
    };

    // –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–∞—Å (–ö–∏—ó–≤)
    const sentAt = new Intl.DateTimeFormat('ru-RU', {
      timeZone: 'Europe/Moscow',
      dateStyle: 'short',
      timeStyle: 'medium',
    }).format(new Date());

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ MarkdownV2
    const telegramMessage =
      `*üê± –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ—à–∫–∏*\n\n` +
      `*üë§ Name:* ${nameSafe}\n` +
      `${contactTypeLabels[contactType] || 'üìû Contact'}: ${contactSafe}\n` +
      (catSafe ? `*üêæ Cat:* ${catSafe}\n` : '') +
      `\n*üí¨ Message:*\n${msgSafe}\n` +
      `\n_Sent: ${escapeMdV2(sentAt)}_`;

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É Telegram
    const tgUrl = `https://api.telegram.org/bot${telegramToken}/sendMessage`;
    const body = {
      chat_id: chatId,
      text: telegramMessage,
      parse_mode: 'MarkdownV2',
      disable_web_page_preview: true,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(tgUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });

    if (!telegramResponse.ok) {
      // –∑—á–∏—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏, –∞–ª–µ –Ω–µ –≤—ñ–¥–¥–∞—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É
      const errText = await telegramResponse.text();
      console.error('Telegram API error:', errText.slice(0, 500));
      return json(res, 502, { error: 'Error sending message' });
    }

    return json(res, 200, {
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
    });
  } catch (e) {
    console.error('Contact API error:', e);
    return json(res, 500, { error: 'Internal server error' });
  }
}
